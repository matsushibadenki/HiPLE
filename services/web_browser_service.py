# path: ./services/web_browser_service.py
# title: Web Browser Service with Playwright
# description: Uses Playwright to robustly fetch and render web pages, including JavaScript-heavy sites.

import atexit
from typing import Optional
from playwright.sync_api import sync_playwright, Browser, Page, Playwright

class WebBrowserService:
    """
    Playwright„Çí‰ΩøÁî®„Åó„Å¶Web„Éñ„É©„Ç¶„Ç∏„É≥„Ç∞Ê©üËÉΩ„ÇíÊèê‰æõ„Åô„Çã„Çµ„Éº„Éì„Çπ„ÄÇ
    """
    def __init__(self):
        self.playwright: Optional[Playwright] = None
        self.browser: Optional[Browser] = None
        try:
            print("üîÑ Playwright„ÇíÂàùÊúüÂåñ„Åó„Å¶„ÅÑ„Åæ„Åô...")
            self.playwright = sync_playwright().start()
            self.browser = self.playwright.chromium.launch(headless=True)
            print("‚úÖ Playwright„ÅÆÂàùÊúüÂåñ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ")
            # Ensure browser is closed on exit
            atexit.register(self.close_browser)
        except Exception as e:
            print(f"‚ùå Playwright„ÅÆÂàùÊúüÂåñ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
            print("‚ÑπÔ∏è  „Ç≥„Éû„É≥„Éâ„Éó„É≠„É≥„Éó„Éà„Åß 'playwright install' „ÇíÂÆüË°å„Åó„Å¶„ÄÅ„Éñ„É©„Ç¶„Ç∂„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
            self.playwright = None
            self.browser = None

    def get_page(self) -> Optional[Page]:
        """
        Êñ∞„Åó„ÅÑ„Éñ„É©„Ç¶„Ç∂„Éö„Éº„Ç∏„ÇíÂèñÂæó„Åæ„Åü„ÅØÊó¢Â≠ò„ÅÆ„ÇÇ„ÅÆ„ÇíÂÜçÂà©Áî®„Åô„Çã„ÄÇ
        """
        if not self.browser:
            print("‚ùå „Éñ„É©„Ç¶„Ç∂„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ")
            return None
        try:
            # Use the first page if available, else create a new one.
            if self.browser.contexts and self.browser.contexts[0].pages:
                 return self.browser.contexts[0].pages[0]
            return self.browser.new_page()
        except Exception as e:
            print(f"‚ùå Êñ∞„Åó„ÅÑ„Éö„Éº„Ç∏„ÅÆ‰ΩúÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
            return None

    def get_page_content(self, url: str) -> str:
        """
        ÊåáÂÆö„Åï„Çå„ÅüURL„ÅÆ„Éö„Éº„Ç∏„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂèñÂæó„Åô„Çã„ÄÇ
        """
        page = self.get_page()
        if not page:
            return "„Ç®„É©„Éº: „Éñ„É©„Ç¶„Ç∂„Éö„Éº„Ç∏„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ"
        
        try:
            print(f"üñ•Ô∏è „Éö„Éº„Ç∏„Å´ÁßªÂãï‰∏≠: {url}")
            # DOM„Åå„É≠„Éº„Éâ„Åï„Çå„Çã„Åæ„ÅßÂæÖ„Å§
            page.goto(url, timeout=30000, wait_until="domcontentloaded")
            
            # JavaScript„ÅÆÈùûÂêåÊúüË™≠„ÅøËæº„Åø„Å™„Å©„ÇíËÄÉÊÖÆ„Åó„ÄÅ5ÁßíÈñìÂæÖÊ©ü
            print("‚è≥ ÂãïÁöÑ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆË™≠„ÅøËæº„Åø„ÇíÂæÖÊ©ü„Åó„Å¶„ÅÑ„Åæ„Åô...")
            page.wait_for_timeout(5000)

            print("üìù „Éö„Éº„Ç∏„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂèñÂæó‰∏≠...")
            content = page.content()
            if not content:
                return f"„Ç®„É©„Éº: URL '{url}' „Åã„Çâ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ"
            
            print(f"‚úÖ „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÊ≠£Â∏∏„Å´ÂèñÂæó„Åó„Åæ„Åó„Åü (Èï∑„Åï: {len(content)} ÊñáÂ≠ó)„ÄÇ")
            return content

        except Exception as e:
            error_message = f"„Ç®„É©„Éº: URL '{url}' „ÅÆË™≠„ÅøËæº„Åø‰∏≠„Å´ÂïèÈ°å„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü - {e}"
            print(f"‚ùå {error_message}")
            return error_message

    def close_browser(self) -> None:
        """
        „Éñ„É©„Ç¶„Ç∂„Å®Playwright„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÈñâ„Åò„Çã„ÄÇ
        """
        if self.browser or self.playwright:
            print("üñ•Ô∏è „Éñ„É©„Ç¶„Ç∂„ÇíÁµÇ‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åô...")
            if self.browser:
                self.browser.close()
                self.browser = None
            if self.playwright:
                self.playwright.stop()
                self.playwright = None
